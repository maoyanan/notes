合并分支的一种方法，类似于 merge

不同点在于，merge 会把两个分支的快照，以及二者最新的共同祖先进行三方合并，并产生一个新的提交对象。
rebase 把一个分支里的提交的改变移到另一个分支里重放一遍。原理：回到两个分支最近的共同祖先，根据当前分支后续的历次提交对象，生成一系列文件补丁，
  然后以基底分支（主干分支 master）最后一个提交对象为新的出发点，逐个应用之前准备好的补丁文件，最后会成成一个新的合并提交对象，从而改写 新的提
  交历史，使它成为 master 分支的直接下游。
一般 rebase 的目的，是想要得到一个能在远程分支上干净应用的补丁。
注意，合并结果中最后一次提交所指向的快照，无论是通过 rebase，还是三方合并，都会得到相同的快照，只不过提交历史不同罢了。rebase 是按照每行的修改次
  序重演一遍修改，而合并是把最攻结果合并在一起。
-------------------------------------
git rebase --onto master server client
假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步的测试），这个时候，我们就可以基于 client 
  分支而非 server 分支的改变，跳过 server 直接放到 master 分支中重演一遍，此时就需要 git rebase --onto
-------------------------------------
git rebase [主分支][特性分支]

-------------------------------------

rebase 的使用准则：
  一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作。
-------------------------------------

参考：
https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88

