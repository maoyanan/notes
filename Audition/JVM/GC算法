一、标记-清楚算法 （Mark-Sweep）
   首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。
   最基础的手机算法，后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。
   缺点：
       1. 效率问题，标记和清除的过程的效率都不高
       2. 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片可能会导致，当程序在以后的运行过程中需要分配比较大对象时无法找到足够的连续内存而
          不得不提前出发另一次来及收集动作。
二、复制算法 （Copying）
   它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空
   间一次清理掉。
   这样每次都对其中一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法
   的代价是将内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低。
   缺点：
       1. 内存缩小为原来的一半。
       2. 持续复制长生存期的对象则导致效率降低。
   如果不想浪费 50% 的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都 100% 存活得极端情况，所以老年代一般不能直接选用这种算法。
三、标记-压缩算法、标记-整理（Mark-Compact）
   标记过程仍然是 “标记-清除” 算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活得对象都向一端移动，然后直接清理掉端边界以外的内存。
四、分代收集算法 （Generational Collection）
   GC 分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。
   
   把 java 堆分为新生代和年老代，这样就可以根据各个年代的特点采用最适当的收集算法。
   在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。
   在年老代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用 “标记-清理” 或 “标记-整理” 算法来进行回收。
   
——————————————————————————————
参考：
http://www.cnblogs.com/ityouknow/p/5614961.html
   
   
   
   
