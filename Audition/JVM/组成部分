JVM 的内部组成
  
  运行所有 Java 程序的抽象计算机，是 java 语言的运行环境，它是 java 最具有吸引力的特性之一。
  1. 类装载器子系统
     负责查找并装载 Class 文件到内存，最终形成可以被虚拟机直接使用的 java 类型。
  2. 方法区
     在类装载器 class 文件到内存的过程中，虚拟机会提取其中的类型信息，并将这些信息存储到方法去。方法区用于存储已被虚拟机加载的类信息、常量、静态变量、
     即时编译器编译后的代码等数据。由于所有线程都共享方法区，因此他们对方法区数据的访问必须被设计为是线程安全的。
  3. 堆
     存储 java 程序创建的类实例。所有线程共享，因此设计程序时也要考虑到都线程访问对象（堆数据）的同步问题。
  4. Java 栈
     java 栈是线程私有的。每当启动一个新线程时，java 虚拟机都会为它分配一个 java 栈。 java 栈以帧为单位保存线程的运行状态。虚拟机指挥直接对 java 栈
     执行两种操作：以栈帧为单位的压栈或出栈。当线程调用 java 方法时，虚拟机压入一个新的栈帧到该线程的 java 栈中。当方法返回时，这个栈帧被从 java 栈中弹出
     并抛弃。一个栈帧包含一个 java 方法的调用状态，它存储有局部变量表、操作栈、动态链接、方法出口等信息。
  5. 程序计数器
     一个运行的 java 程序，每当启动一个新线程时，都会为这个新线程创建一个自己的 PC （程序计数器）寄存器。程序计数器的作用可以看做是当前线程所执行的字节码的行号
     的行号只是器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个
     计数器来完成。如果线程正在执行的是一个 java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器值为空
     （Undefined）.
  6. 本地方法栈：
     本地方法栈与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行 java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的
     Native 方法服务。任何本地方法接口都会使用某种本地方法栈。当线程调用 java 方法时，虚拟机会创建一个新的栈帧并压入 java 栈。然而当它调用的是本
     地方法时，虚拟机会保持java 栈不变，不再在线程的 java 栈中亚茹新的帧，虚拟机只是简单地动态链接并直接调用指定的本地方法。如果某个虚拟机实现的本
     地方法接口是使用 C 连接模型的，那么它的本地方法栈就是 C 栈。
  7. 执行引擎：
     负责执行字节码。方法的字节码是由 java 虚拟机的指令序列构成的。每一条指令包含一个单字节的操作码，后面跟随 0 个 或多个操作数，执行引擎执行字节码时，
     首先取得一个操作码，如果操作码有操作数，取得它的操作数。它执行操作码和跟随的操作数规定的动作，然后再取得下一个操作码。这个执行字节码的过程在线程完
     成前将一直持续。


————————————————————————————————————————————————————
参考：
http://blog.csdn.net/wuwenxiang91322/article/details/10449177
