事实上不可变的(effectively immutable)
  可将它保存在静态域中，做为类初始化的一部分，可以将它保存在 volatile 域， final 域 或者通过正常锁定访问的域中，或者可以将它放到并发的集合中。

缺少同步，会造成程序的活性失败（liveness failure）和安全性失败(safety failure)
    安全性失败（safety failure）: 程序计算结果出错
    活性失败(liveness failure) : 程序无法前进 

过度同步，可能造成性能减低，死锁，甚至不确定的行为。
从同步区域中调用外来的方法(alien),它会导致异常、死锁或者数据损坏。

ReentranitLock 可重入锁
Java 类提供了一个并发集合（concurrent collection）
CopyOnWriteArrayList 是通过重新拷贝整个底层数组，在这里实现所有的写操作。由于数组永远不可改动，因此迭代不需要锁定。

通常，在同步区域内做尽可能少的工作。
如果一个可变的类要并发使用，应该使这个类变成线程安全的，通过内部同步，可以获得明显比外部锁定整个对象更高的并发性。否则，就不要在内部同步.让客户在必要的
时候从外部同步。

如果在内部使用了同步类，可以使用不同的方法来实现高并发性，例如 分拆锁 （lock splitting）、分离锁（lock striping）和非阻塞（nonblocking）并发控制。

如果同步方法修改了静态域，那么你也必须同步对这个域的访问，即使它往往只是单个线程。

总结：
    为了避免死锁和数据破坏，千万不要从同步区域内部调用外来方法。更为一般地讲，要尽量限制同步区域内部的工作量。当设计一个可变类时，要考虑它们是否应该自
    己完成同步操作。多核时代，这比永远不要过度同步更重要。只有有足够的理由一定要用内部类的时候，才应该这么做，同时还应该将这个决定清楚的写到文档中。
